require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const Alexa = require('ask-sdk-core');
const axios = require('axios');
const { toEnglish, toTelugu, toPhonetic } = require('./translate');
const { getUsageStats } = require('./usageTracker');

const app = express();
app.use(bodyParser.json());

const ChatIntentHandler = {
  canHandle(handlerInput) {
    return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest' &&
      Alexa.getIntentName(handlerInput.requestEnvelope) === 'ChatIntent';
  },

  async handle(handlerInput) {
    try {
      const userInput = Alexa.getSlotValue(handlerInput.requestEnvelope, 'question');
      if (!userInput || userInput.trim() === '') {
        const fallbackMsg = "‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±ã ‡∞®‡∞æ‡∞ï‡±Å ‡∞§‡±Ü‡∞≤‡∞ø‡∞Ø‡∞≤‡±á‡∞¶‡±Å.";
        const phonetic = toPhonetic(fallbackMsg);
        return handlerInput.responseBuilder
          .speak(`<speak><lang xml:lang=\"en-IN\">${phonetic}</lang></speak>`)
          .reprompt("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.")
          .getResponse();
      }

      console.log("üó£Ô∏è User input:", userInput);

      const englishInput = await toEnglish(userInput);
      console.log("üåê Translated to English:", englishInput);

      const gptResponse = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: "gpt-3.5-turbo",
          messages: [{ role: "user", content: englishInput }]
        },
        {
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
          }
        }
      );

      const englishOutput = gptResponse.data.choices[0].message.content;
      console.log("ü§ñ GPT Output:", englishOutput);

      const teluguScript = await toTelugu(englishOutput);
      const phoneticTelugu = toPhonetic(teluguScript);

      return handlerInput.responseBuilder
        .speak(`<speak><lang xml:lang=\"en-IN\">${phoneticTelugu}</lang></speak>`)
        .reprompt("‡∞á‡∞Ç‡∞ï‡∞æ ‡∞è‡∞Æ‡±à‡∞®‡∞æ ‡∞Ö‡∞°‡∞ó‡∞æ‡∞≤‡∞æ?")
        .withSimpleCard("Chitti Bot", teluguScript)
        .getResponse();
    } catch (err) {
      console.error("‚ùå ChatIntentHandler Error:", err);
      const fallback = "‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞≤‡±ã‡∞™‡∞Ç ‡∞∏‡∞Ç‡∞≠‡∞µ‡∞ø‡∞Ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.";
      const phoneticFallback = toPhonetic(fallback);
      return handlerInput.responseBuilder
        .speak(`<speak><lang xml:lang=\"en-IN\">${phoneticFallback}</lang></speak>`)
        .reprompt("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")
        .withSimpleCard("Chitti Bot", fallback)
        .getResponse();
    }
  }
};

const LaunchRequestHandler = {
  canHandle(handlerInput) {
    return Alexa.getRequestType(handlerInput.requestEnvelope) === 'LaunchRequest';
  },
  handle(handlerInput) {
    const welcome = "‡∞π‡∞æ‡∞Ø‡±ç! ‡∞®‡±á‡∞®‡±Å ‡∞ö‡∞ø‡∞ü‡±ç‡∞ü‡∞ø ‡∞¨‡∞æ‡∞ü‡±ç. ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å?";
    const phoneticWelcome = toPhonetic(welcome);
    return handlerInput.responseBuilder
      .speak(`<speak><lang xml:lang=\"en-IN\">${phoneticWelcome}</lang></speak>`)
      .reprompt("‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞Æ‡∞ø ‡∞Ö‡∞°‡∞ó‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å?")
      .withSimpleCard("Chitti Bot", welcome)
      .getResponse();
  }
};

const HelpIntentHandler = {
  canHandle(handlerInput) {
    return Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.HelpIntent';
  },
  handle(handlerInput) {
    const msg = "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Ö‡∞°‡∞ó‡∞æ‡∞≤‡∞®‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞® ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø.";
    const phonetic = toPhonetic(msg);
    return handlerInput.responseBuilder
      .speak(`<speak><lang xml:lang=\"en-IN\">${phonetic}</lang></speak>`)
      .reprompt("‡∞á‡∞Ç‡∞ï‡∞æ ‡∞è‡∞Æ‡±à‡∞®‡∞æ ‡∞Ö‡∞°‡∞ó‡∞æ‡∞≤‡∞æ?")
      .withSimpleCard("Chitti Bot Help", msg)
      .getResponse();
  }
};

const CancelAndStopIntentHandler = {
  canHandle(handlerInput) {
    return ['AMAZON.CancelIntent', 'AMAZON.StopIntent'].includes(Alexa.getIntentName(handlerInput.requestEnvelope));
  },
  handle(handlerInput) {
    const msg = "‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å! ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞ï‡∞≤‡±Å‡∞¶‡±ç‡∞¶‡∞æ‡∞Ç.";
    const phonetic = toPhonetic(msg);
    return handlerInput.responseBuilder
      .speak(`<speak><lang xml:lang=\"en-IN\">${phonetic}</lang></speak>`)
      .withSimpleCard("Chitti Bot", msg)
      .getResponse();
  }
};

const FallbackHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest' &&
               Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.FallbackIntent';
    },
  handle(handlerInput) {
    const msg = "‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞®‡±á‡∞®‡±Å ‡∞Ü ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞®‡±Å ‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±ã‡∞≤‡±á‡∞®‡±Å. ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.";
    const phonetic = toPhonetic(msg);
    console.error("‚ö†Ô∏è Alexa triggered FallbackIntent ‚Äî no intent matched.");
    console.error("üî¥ Unmatched Request:", JSON.stringify(handlerInput.requestEnvelope, null, 2));
    return handlerInput.responseBuilder
      .speak(`<speak><lang xml:lang=\"en-IN\">${phonetic}</lang></speak>`)
      .reprompt("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞∞‡±ã ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø.")
      .withSimpleCard("Chitti Bot", msg)
      .getResponse();
  }
};

const ErrorHandler = {
  canHandle() {
    return true;
  },
  handle(handlerInput, error) {
    console.error("üî• General Error:", error.stack);
    const errorMessage = "‡∞≤‡±ã‡∞™‡∞Ç ‡∞∏‡∞Ç‡∞≠‡∞µ‡∞ø‡∞Ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.";
    const errorPhonetic = toPhonetic(errorMessage);
    return handlerInput.responseBuilder
      .speak(`<speak><lang xml:lang=\"en-IN\">${errorPhonetic}</lang></speak>`)
      .reprompt("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")
      .withSimpleCard("Chitti Bot - ‡∞≤‡±ã‡∞™‡∞Ç", errorMessage)
      .getResponse();
  }
};

const skill = Alexa.SkillBuilders.custom()
  .addRequestHandlers(
    LaunchRequestHandler,
    ChatIntentHandler,
    HelpIntentHandler,
    CancelAndStopIntentHandler,
    FallbackHandler
  )
  .addErrorHandlers(ErrorHandler)
  .create();

app.post('/alexa', async (req, res) => {
  try {
    const response = await skill.invoke(req.body, req.headers);
    res.json(response);
  } catch (err) {
    console.error("‚ùå Alexa Endpoint Error:", err.message);
    res.status(500).send("Internal Server Error");
  }
});

app.get('/usage', (req, res) => {
  const stats = getUsageStats();
  res.json({
    used_today: stats.today,
    used_last_7_days: stats.week,
    used_last_30_days: stats.month,
    used_last_365_days: stats.year,
    total_characters: stats.total,
    free_tier_limit: stats.limit
  });
});

app.get('/', (req, res) => {
  res.send('‚úÖ Chitti Bot is live with multilingual support!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ Chitti backend running on port ${PORT}`));